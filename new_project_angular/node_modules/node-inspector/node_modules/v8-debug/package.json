{
  "name": "v8-debug",
  "version": "0.3.1",
  "description": "v8 debugger extending API",
  "homepage": "http://github.com/node-inspector/v8-debug",
  "author": {
    "name": "3y3 Ghoti",
    "email": "3y3@bk.ru"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/node-inspector/v8-debug.git"
  },
  "license": {
    "name": "BSD",
    "url": "https://github.com/node-inspector/v8-debug/blob/master/LICENSE"
  },
  "binary": {
    "module_name": "debug",
    "module_path": "./build/{module_name}/v{version}/{node_abi}-{platform}-{arch}/",
    "remote_path": "./{module_name}/v{version}/",
    "package_name": "{node_abi}-{platform}-{arch}.tar.gz",
    "host": "https://node-inspector.s3.amazonaws.com/"
  },
  "keywords": [
    "v8",
    "debugger"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "main": "v8-debug",
  "dependencies": {
    "node-pre-gyp": "0.5.x",
    "nan": "~1.2.0"
  },
  "devDependencies": {
    "aws-sdk": "~2.0.0",
    "mocha": "~1.20.1",
    "chai": "~1.9.1"
  },
  "scripts": {
    "install": "node-pre-gyp install --fallback-to-build",
    "test": "mocha"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/node-inspector/v8-debug.png?branch=master)](http://travis-ci.org/node-inspector/v8-debug)\r\n\r\n# v8-debug\r\nProvides extending API for [node](http://github.com/ry/node) internal debugger protocol (based on [v8 debugger protocol](https://code.google.com/p/v8/wiki/DebuggerProtocol))\r\n\r\nThis is a part of [node-inspector](http://github.com/node-inspector/node-inspector).\r\n\r\n## Installation\r\n\r\n    npm install v8-debug\r\n\r\n## API\r\n\r\n| Command | Params | Type | Description |\r\n| :---: | :---: | :---: | :--- |\r\n|registerCommand|||*Register new debug processor command, like 'lookup'.* (Alias `register`)|\r\n||name|**{String}**| *Name of command.*|\r\n||callback|**{Function}**|*function(request, response) modify your response in this function.*|\r\n|registerEvent|||*Register new debug processor event, like 'break'.*|\r\n||name|**{String}**| *Name of command.*|\r\n|execCommand|||*Call debug processor command like 'lookup'.* (Alias `command`)|\r\n||name|**{String}**| *Name of command.*|\r\n||attributes|**{Object}**| *Extra parameters, that passes as command arguments.*|\r\n||userdata|**{Object}**| *Data than needs to be stored, but can't be serialised before call processor callback.* (Not implemented now)|\r\n|emitEvent|||*Like `execCommand`*|\r\n|commandToEvent|||*Convert command response object to default event object with same name*|\r\n||request|**{Object}**|*Request object created by debugger*|\r\n||response|**{Object}**|*Response object that needs to be converted*|\r\n|runInDebugContext|||*Evaluate string or function (stringifyed) in debug context.* (Alias `get`)|\r\n||script|**{String/Function}**|*String or _clear_ function that needs to be evaluated in debug context *|\r\n\r\n## Usage\r\n\r\n```js\r\nvar debug = require('v8-debug');\r\nvar MakeMirror = debug.get('MakeMirror');\r\n\r\n//register 'console' event in v8 debugger protocol\r\ndebug.registerEvent('console');\r\n//Now debugger can emit new event 'console'\r\n\r\n//register '_lookup' command in v8 debugger protocol\r\ndebug.registerCommand('_lookup', function(request, response) {\r\n  //do someting here\r\n  //and modify response\r\n  response.body = {};\r\n});\r\n\r\nconsole.log = (function(fn) {\r\n  return function() {\r\n    //Call 'console' command. (Emit console event)\r\n    debug.emitEvent('console', {message: arguments[0]} /*, userdata*/);\r\n    return fn.apply(console, arguments);\r\n  }\r\n} (console.log));\r\n```\r\nFor more experience see [protocol documentation](https://github.com/buggerjs/bugger-v8-client/blob/master/PROTOCOL.md)\r\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/node-inspector/v8-debug/issues"
  },
  "bundleDependencies": [
    "node-pre-gyp"
  ],
  "_id": "v8-debug@0.3.1",
  "_shasum": "a2a552db05515246e480a97184a9eaa0cfc20e6b",
  "_from": "v8-debug@~0.3.0",
  "_resolved": "https://registry.npmjs.org/v8-debug/-/v8-debug-0.3.1.tgz"
}
